name: CI/CD Pipeline with Security Scanning

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ format('{0}/{1}', github.repository_owner, github.event.repository.name) }}
  DOTNET_VERSION: '9.0.x'

jobs:
  # ============ JOB 1: BUILD & TEST ============
  build-and-test:
    name: Build & Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore NuGet packages
        run: dotnet restore src/ServiceExample/ServiceExample/ServiceExample.csproj

      - name: Build application
        run: dotnet build src/ServiceExample/ServiceExample/ServiceExample.csproj --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test src/ServiceExample/ServiceExample/ServiceExample.csproj --configuration Release --no-build --logger trx --collect:"XPlat Code Coverage"

  # ============ JOB 2: BUILD DOCKER IMAGE & PUSH ============
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lowercase image name
        id: image
        run: |
          IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" | tr '[:upper:]' '[:lower:]')
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "Using image: $IMAGE_NAME"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============ JOB 3: SCAN WITH TRIVY ============
  scan-trivy:
    name: Scan Docker Image with Trivy
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image reference (lowercase)
        id: image
        run: |
          IMAGE=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" | tr '[:upper:]' '[:lower:]')
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "Scanning image: $IMAGE"

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy scan with table output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.image }}
          format: 'table'
          severity: 'HIGH,CRITICAL'

  # ============ JOB 4: SIGN IMAGE WITH COSIGN ============
  sign-image:
    name: Sign Docker Image with Cosign
    runs-on: ubuntu-latest
    needs: scan-trivy
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.0.0'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign Docker image with Cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_URL=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" | tr '[:upper:]' '[:lower:]')
          echo "Signing image: $IMAGE_URL"
          cosign sign --yes "$IMAGE_URL"
          echo "Image signed successfully"

      - name: Verify image signature
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_URL=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" | tr '[:upper:]' '[:lower:]')
          echo "Verifying signature for: $IMAGE_URL"
          cosign verify "$IMAGE_URL" || echo "Signature verification requires additional setup"
