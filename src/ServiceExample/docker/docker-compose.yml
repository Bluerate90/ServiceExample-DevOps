services:
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-ServiceExampleDB}
    volumes:
      - mongo_data:/data/db
    networks:
      - serviceexample-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test -u ${MONGO_INITDB_ROOT_USERNAME:-admin} -p ${MONGO_INITDB_ROOT_PASSWORD:-password123} --authenticationDatabase admin --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - serviceexample-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  nats:
    image: nats:2.10-alpine
    container_name: nats
    volumes:
      - nats_data:/data/jetstream
    networks:
      - serviceexample-network
    command: -js -m 8222
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/varz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  serviceexample:
    build:
      context: ../
      dockerfile: docker/Dockerfile
    container_name: serviceexample
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_INITDB_DATABASE:-ServiceExampleDB}?authSource=admin
      MONGODB_DATABASE: ${MONGODB_DATABASE:-ServiceExampleDB}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_TLS: ${REDIS_TLS:-false}
      NATS_URL: ${NATS_URL:-nats://nats:4222}
      NATS_JETSTREAM_ENABLED: ${NATS_JETSTREAM_ENABLED:-true}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS:-http://+:5000}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - serviceexample-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health/detailed"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local

networks:
  serviceexample-network:
    driver: bridge
