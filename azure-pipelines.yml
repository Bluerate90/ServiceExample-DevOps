trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'myappregistry1'
  imageRepository: 'serviceexample'
  containerRegistry: 'myappregistry1.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/docker/Dockerfile'
  tag: '$(Build.BuildId)'
  imageName: '$(containerRegistry)/$(imageRepository):$(tag)'
  DOTNET_VERSION: '9.0.x'
  SonarCloudOrg: '777m'
  SonarCloudToken: '$(AZURE_DEVOPS_PAT)'

stages:
  # ============ STAGE 1: CODE SECURITY SCAN ============
  - stage: SecurityScan_SAST
    displayName: 'Security Scanning - SAST'
    jobs:
      - job: CodeAnalysis
        displayName: 'Code Quality & Vulnerability Analysis'
        steps:
          - task: UseDotNet@2
            inputs:
              version: $(DOTNET_VERSION)
            displayName: 'Install .NET 9'

          - script: dotnet restore ServiceExample/ServiceExample/ServiceExample.csproj
            displayName: 'Restore NuGet Packages'

          # SonarQube Analysis using CLI
          - script: |
              echo "Installing SonarScanner for .NET..."
              dotnet tool install --global dotnet-sonarscanner
              echo "Starting SonarQube analysis..."
              dotnet sonarscanner begin /k:"serviceexample" /o:"$(SonarCloudOrg)" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="$(AZURE_DEVOPS_PAT)"
            displayName: 'Setup SonarQube Scanner'
            continueOnError: true

          - script: dotnet build ServiceExample/ServiceExample/ServiceExample.csproj --configuration $(buildConfiguration) --no-restore
            displayName: 'Build Application (with SonarQube)'
            continueOnError: true

          - script: |
              echo "Ending SonarQube analysis..."
              dotnet sonarscanner end /d:sonar.login="$(AZURE_DEVOPS_PAT)"
            displayName: 'Publish SonarQube Results'
            continueOnError: true

          # Dependency Check - for vulnerable packages
          - script: |
              echo "Installing Dependency-Check..."
              wget https://github.com/dependency-check/dependency-check/releases/download/v8.4.0/dependency-check_8.4.0_all.deb
              sudo apt-get update
              sudo apt-get install -y ./dependency-check_8.4.0_all.deb
              echo "Running Dependency-Check scan..."
              dependency-check.sh --project "ServiceExample" --scan $(Build.SourcesDirectory) --format JSON --out $(Build.ArtifactStagingDirectory)
            displayName: 'Run Dependency Check'
            continueOnError: true

          # Trivy - Filesystem scan
          - script: |
              echo "Installing Trivy..."
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
              echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
              sudo apt-get update
              sudo apt-get install -y trivy
              echo "Running Trivy filesystem scan..."
              trivy fs --format json --output $(Build.ArtifactStagingDirectory)/trivy-fs.json $(Build.SourcesDirectory)
              trivy fs --severity HIGH,CRITICAL $(Build.SourcesDirectory)
            displayName: 'Run Trivy Filesystem Scan'
            continueOnError: true

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: 'security-scan-reports'
            displayName: 'Publish Security Reports'
            condition: always()

  # ============ STAGE 2: BUILD & TEST ============
  - stage: BuildAndTest
    displayName: 'Build & Test Application'
    dependsOn: SecurityScan_SAST
    condition: succeeded()
    jobs:
      - job: BuildJob
        displayName: 'Build & Run Tests'
        steps:
          - task: UseDotNet@2
            inputs:
              version: $(DOTNET_VERSION)
            displayName: 'Install .NET 9'

          - script: dotnet restore ServiceExample/ServiceExample/ServiceExample.csproj
            displayName: 'Restore NuGet Packages'

          - script: dotnet build ServiceExample/ServiceExample/ServiceExample.csproj --configuration $(buildConfiguration) --no-restore
            displayName: 'Build Application'

          - script: dotnet test ServiceExample/ServiceExample/ServiceExample.csproj --configuration $(buildConfiguration) --no-build --logger trx --collect:"XPlat Code Coverage"
            displayName: 'Run Unit Tests'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/TEST-*.trx'
            displayName: 'Publish Test Results'
            condition: always()

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
            displayName: 'Publish Code Coverage'
            condition: always()

  # ============ STAGE 3: BUILD DOCKER IMAGE ============
  - stage: BuildDocker
    displayName: 'Build Docker Image'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: DockerJob
        displayName: 'Build & Push Docker Image'
        steps:
          - task: Docker@2
            inputs:
              command: 'build'
              Dockerfile: '$(dockerfilePath)'
              tags: |
                $(imageName)
                $(containerRegistry)/$(imageRepository):latest
            displayName: 'Build Docker Image'

          - script: |
              echo "Getting ACR credentials..."
              ACR_PASSWORD=$(az acr credential show --name myappregistry1 --query passwords[0].value -o tsv)
              echo "##vso[task.setvariable variable=ACR_PASSWORD;issecret=true]$ACR_PASSWORD"
            displayName: 'Get ACR Credentials'

          - script: |
              echo "Logging in to Azure Container Registry..."
              docker login -u myappregistry1 -p $(ACR_PASSWORD) $(containerRegistry)
              echo "Pushing Docker image to registry..."
              docker push $(imageName)
              docker push $(containerRegistry)/$(imageRepository):latest
            displayName: 'Push to Azure Container Registry'

  # ============ STAGE 4: SCAN DOCKER IMAGE ============
  - stage: ScanContainer
    displayName: 'Scan Docker Image'
    dependsOn: BuildDocker
    condition: succeeded()
    jobs:
      - job: ContainerScanJob
        displayName: 'Scan Image for Vulnerabilities'
        steps:
          - script: |
              echo "Installing Trivy for image scanning..."
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
              echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
              sudo apt-get update
              sudo apt-get install -y trivy
              echo "Running Trivy image scan..."
              trivy image --format json --output $(Build.ArtifactStagingDirectory)/trivy-image.json $(imageName)
              trivy image --severity HIGH,CRITICAL $(imageName)
            displayName: 'Run Trivy Image Scan'
            continueOnError: true

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: 'image-scan-reports'
            displayName: 'Publish Image Scan Reports'
            condition: always()

  # ============ STAGE 5: SIGN IMAGE ============
  - stage: SignImage
    displayName: 'Sign Docker Image'
    dependsOn: ScanContainer
    condition: succeeded()
    jobs:
      - job: SignJob
        displayName: 'Sign Image with Cosign'
        steps:
          - script: |
              echo "Downloading Cosign v2.0.0..."
              wget https://github.com/sigstore/cosign/releases/download/v2.0.0/cosign-linux-amd64
              chmod +x cosign-linux-amd64
              sudo mv cosign-linux-amd64 /usr/local/bin/cosign
              cosign version
              echo "Cosign installation completed"
            displayName: 'Install Cosign'
            continueOnError: true

          - script: |
              echo "Authenticating with Azure Container Registry..."
              az acr login --name myappregistry1
              echo "Authentication successful"
            displayName: 'Login to ACR'
            continueOnError: true

          - script: |
              echo "Image ready for signing: $(imageName)"
              echo "Note: Configure cosign keys in Azure Key Vault for production signing"
            displayName: 'Prepare for Image Signing'
            continueOnError: true